<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>flredecomp_long</name>
  <owner userid="pfarrell"/>
  <tags>flml</tags>
  <problem_definition length = "long" nprocs = "7">
    <command_line>make clean-run; mpiexec flredecomp -v -l -i 3 -o 7 CoarseCorner_1_checkpoint output7; mkdir flredecomp_out; mv flredecomp.err-* flredecomp.log-* flredecomp_out; mpiexec flredecomp -v -l -i 7 -o 4 output7 output4</command_line>
  </problem_definition>
  <variables>
    <variable name = "output7_meshes" language = "python">
import glob
    
import fluidity.diagnostics.triangletools as triangletools

output7_meshes = []
for i in range(7):
  output7_meshes.append(triangletools.ReadTriangle("output7_CoordinateMesh_" + str(i)))
    </variable>
    <variable name = "output4_meshes" language = "python">
import glob
    
import fluidity.diagnostics.triangletools as triangletools

output4_meshes = []
for i in range(4):
  output4_meshes.append(triangletools.ReadTriangle("output4_CoordinateMesh_" + str(i)))
    </variable>
  </variables>
  <pass_tests>
    <test name = "Empty error files flredecomp 3 to 7" language = "python">
import glob
import os

for logfile in glob.glob("flredecomp_out/*.err-*"):
  assert os.stat(logfile)[6] == 0
    </test>
  <test name = "Empty error files flredecomp 7 to 4" language = "python">
import glob
import os

for logfile in glob.glob("*.err-*"):
  assert os.stat(logfile)[6] == 0
    </test>
    <test name = "Equal sized partitions flredecomp 3 to 7 (nodes)" language = "python">
import fluidity_tools
nodeCounts = []
for partition in output7_meshes:
  nodeCounts.append(partition.NodeCoordsCount())
fluidity_tools.compare_variables([float(nodeCount) for nodeCount in nodeCounts[1:]], [float(nodeCounts[0]) for i in range(len(nodeCounts) - 1)], 0.5)
    </test>
    <test name = "Equal sized partitions flredecomp 7 to 4 (nodes)" language = "python">
import fluidity_tools
nodeCounts = []
for partition in output4_meshes:
  nodeCounts.append(partition.NodeCoordsCount())
fluidity_tools.compare_variables([float(nodeCount) for nodeCount in nodeCounts[1:]], [float(nodeCounts[0]) for i in range(len(nodeCounts) - 1)], 0.25)
    </test>    
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
